<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>袁平</title>
    <description>Hello-World</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 24 Aug 2018 12:00:19 +0800</pubDate>
    <lastBuildDate>Fri, 24 Aug 2018 12:00:19 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>高质量代码</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;本文不会详细去讲解代码规范等东西, 只是浅谈对高质量代码的一些细节理解和注意事项总结
«剑指Offer»第三章要点总结&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;h2 id=&quot;一-什么叫高质量代码&quot;&gt;一. 什么叫高质量代码&lt;/h2&gt;

&lt;h3 id=&quot;11-规范性&quot;&gt;1.1 规范性&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;从三个方面考虑: 书写, 布局, 命名&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;11-1-清晰的书写&quot;&gt;1.1-1 清晰的书写&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;能够辨识, 一般而言, 面试代码都比较短, 所以一般时间充足&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;11-2-清晰的布局&quot;&gt;1.1-2 清晰的布局&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;代码缩进, 空格等, 了解一下手打格式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;11-3-合理的命名&quot;&gt;1.1-3 合理的命名&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;命名需要有意义, 不要嫌函数名太长, 最好做到一眼能够猜出大致用途&lt;/li&gt;
  &lt;li&gt;比如命名: &lt;code class=&quot;highlighter-rouge&quot;&gt;BinaryTreeNode&lt;/code&gt;而不要用&lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt;, 相比较之下, 前者更明确&lt;/li&gt;
  &lt;li&gt;用完整的英文单词组合命名, 除了公认的缩写&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12-完整性&quot;&gt;1.2 完整性&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;也从三个方面考虑: 基本功能, 边界值, 错误处理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;12-1-基本功能&quot;&gt;1.2-1 基本功能&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;基本功能是首要考虑的, 基本功能出错是硬伤, hh&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;12-2-边界值&quot;&gt;1.2-2 边界值&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;边界值一般是较为看重的细节地方, 有一句话叫面向测试编程, 虽然不推荐, 但是在动手之前, 想好测试用例, 有助于书写出更鲁棒性的代码&lt;/li&gt;
  &lt;li&gt;比如: int等类型的范围限制, 输入数据的正负, 0等&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;12-3-错误处理&quot;&gt;1.2-3 错误处理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;主要指输入错误, 错误的处理方式有三种, 其优缺点参见下表&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;优点&lt;/th&gt;
      &lt;th&gt;缺点&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;返回值&lt;/td&gt;
      &lt;td&gt;和系统API一致&lt;/td&gt;
      &lt;td&gt;不能方便的使用计算结果&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;全局变量&lt;/td&gt;
      &lt;td&gt;能够方便的使用计算结果&lt;/td&gt;
      &lt;td&gt;用户可能会忘记检查全局变量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;异常&lt;/td&gt;
      &lt;td&gt;可以为不同的出错原因定义不同的异常类型, 逻辑清晰明了&lt;/td&gt;
      &lt;td&gt;有些语言不支持异常, 跑出异常对性能有负面影响&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;三种错误处理方式详解
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;返回值: 即通过函数返回值来识别是否出错和出错类型, 如: Win32 API&lt;/li&gt;
        &lt;li&gt;全局变量: 即设置一个全局变量, 用于标识是否出错, 函数正常返回计算结果&lt;/li&gt;
        &lt;li&gt;异常: try…catch…, 但是有些语言不支持&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 24 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/24/%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/24/%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
        
        <category>Algorithm</category>
        
        
      </item>
    
      <item>
        <title>Blog Template</title>
        <description>&lt;h3 id=&quot;blog-template&quot;&gt;Blog Template&lt;/h3&gt;

&lt;p&gt;发布博客直接将&lt;code class=&quot;highlighter-rouge&quot;&gt;md&lt;/code&gt;文件扔到&lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;文件夹下即可; 需要注意命名规范, 文件名需要以时间格式开头(参照&lt;code class=&quot;highlighter-rouge&quot;&gt;2018-08-20-template.md&lt;/code&gt;命名)&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/20/template/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/20/template/</guid>
        
        <category>Blog</category>
        
        
      </item>
    
  </channel>
</rss>
